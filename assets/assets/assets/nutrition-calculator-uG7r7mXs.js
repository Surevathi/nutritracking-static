const f={"Vitamin A":900,"Vitamin C":90,"Vitamin D":20,"Vitamin E":15,"Vitamin K":120,"Thiamin (B1)":1.2,"Riboflavin (B2)":1.3,"Niacin (B3)":16,"Vitamin B6":1.3,Folate:400,"Vitamin B12":2.4,Biotin:30,"Pantothenic Acid":5},b={Calcium:1e3,Iron:8,Magnesium:400,Phosphorus:700,Potassium:4700,Sodium:2300,Zinc:11,Copper:.9,Manganese:2.3,Selenium:55,Chromium:35,Molybdenum:45},p={Protein:50,Carbohydrates:300,"Total Fat":65,"Saturated Fat":20,Fiber:25,Sugar:50};function u(r){return r<50?"deficient":r<80?"moderate":r<=120?"sufficient":"excessive"}function l(r,i){for(const m of i){const s=r[m];if(s&&s>0)return s}return 0}function y(r){const i={vitamins:{},minerals:{},macros:{},calories:0};r.forEach(e=>{var d;const t=((d=e.food)==null?void 0:d.nutrients)||{},n=(parseFloat(e.portionSize)||100)/100,C=l(t,["Energy","energy","calories","Calories"]);i.calories+=C*n,Object.keys(f).forEach(a=>{const c=l(t,{"Vitamin A":["Vitamin A","Vitamin A, RAE","Retinol activity equivalent"],"Vitamin C":["Vitamin C","Ascorbic acid","Vitamin C, total ascorbic acid"],"Vitamin D":["Vitamin D","Vitamin D2","Vitamin D3"],"Vitamin E":["Vitamin E","Vitamin E (alpha-tocopherol)","Alpha-tocopherol"],"Vitamin K":["Vitamin K","Vitamin K (phylloquinone)","Phylloquinone"],"Thiamin (B1)":["Thiamin","Thiamine","Vitamin B1"],"Riboflavin (B2)":["Riboflavin","Vitamin B2"],"Niacin (B3)":["Niacin","Vitamin B3","Nicotinic acid"],"Vitamin B6":["Vitamin B6","Pyridoxine"],Folate:["Folate","Folic acid","Folate, total"],"Vitamin B12":["Vitamin B12","Cobalamin"],Biotin:["Biotin"],"Pantothenic Acid":["Pantothenic acid","Vitamin B5"]}[a]||[a]);i.vitamins[a]=(i.vitamins[a]||0)+c*n}),Object.keys(b).forEach(a=>{const c=l(t,{Calcium:["Calcium","Ca"],Iron:["Iron","Fe"],Magnesium:["Magnesium","Mg"],Phosphorus:["Phosphorus","P"],Potassium:["Potassium","K"],Sodium:["Sodium","Na"],Zinc:["Zinc","Zn"],Copper:["Copper","Cu"],Manganese:["Manganese","Mn"],Selenium:["Selenium","Se"],Chromium:["Chromium","Cr"],Molybdenum:["Molybdenum","Mo"]}[a]||[a]);i.minerals[a]=(i.minerals[a]||0)+c*n}),Object.keys(p).forEach(a=>{const c=l(t,{Protein:["Protein","Total protein"],Carbohydrates:["Carbohydrate","Carbohydrates","Total carbohydrate"],"Total Fat":["Total lipid (fat)","Fat","Total fat"],"Saturated Fat":["Saturated fat","Fatty acids, total saturated"],Fiber:["Fiber","Dietary fiber","Total dietary fiber"],Sugar:["Sugar","Sugars, total","Total sugars"]}[a]||[a]);i.macros[a]=(i.macros[a]||0)+c*n})});const m={};Object.entries(f).forEach(([e,t])=>{const o=i.vitamins[e]||0,n=Math.round(o/t*100);m[e]={intake:o,rda:t,percentage:n,status:u(n)}});const s={};Object.entries(b).forEach(([e,t])=>{const o=i.minerals[e]||0,n=Math.round(o/t*100);s[e]={intake:o,rda:t,percentage:n,status:u(n)}});const h={};return Object.entries(p).forEach(([e,t])=>{const o=i.macros[e]||0,n=Math.round(o/t*100);h[e]={intake:o,rda:t,percentage:n,status:u(n)}}),{vitamins:m,minerals:s,macros:h,calories:{intake:Math.round(i.calories),target:2e3,percentage:Math.round(i.calories/2e3*100)}}}export{y as calculateNutritionalAnalysis};
